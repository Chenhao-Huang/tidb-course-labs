{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "TrainerName": {
            "Type": "String"
        },
        "TrainerEmail": {
            "Type": "String"
        }
    },
    "Mappings": {
        "UserDataMap": {
            "us-west-2": {
                "common": "#!/bin/bash\necho LANG=en_US.utf-8 >> /etc/environment\necho LC_ALL=en_US.utf-8 >> /etc/environment\nmkdir ~ec2-user/stage/\ncd ~ec2-user/stage/\nrm -rf tidb-course-201-lab/\nyum -y update\nyum -y install git numactl awscli\nyum -y install java-11-amazon-corretto\nrpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022\nwget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\nyum -y install mysql57-community-release-el7-10.noarch.rpm\nyum -y install mysql-community-client\ngit clone https://github.com/pingcap/tidb-course-201-lab.git\nREGION_CODE=`curl http://169.254.169.254/latest/meta-data/placement/region`\necho export REGION_CODE=${REGION_CODE} > ~ec2-user/cloud-env.sh\nalias cp='cp'\ncp -R tidb-course-201-lab/setup/tidb-quick-demo-aws-9-nodes-amz2/* ~ec2-user/\ncp -R tidb-course-201-lab/setup/tidb-lab-mysql-init-amz2/show-mysql-password.sh ~ec2-user/\ncp -R tidb-course-201-lab/scripts/ ~ec2-user/\ncd ~\nchown -R ec2-user:ec2-user ~ec2-user/*\nchmod +x ~ec2-user/*.sh\nchmod +x ~ec2-user/scripts/*.sh\necho \"if [ -f /home/ec2-user/hosts-env.sh ]; then\" >> ~ec2-user/.bashrc\necho \"    source /home/ec2-user/hosts-env.sh\" >> ~ec2-user/.bashrc\necho \"fi;\" >> ~ec2-user/.bashrc\nchown ec2-user:ec2-user ~ec2-user/.bashrc\nsu ec2-user -c \"pip3 install boto3\"\n"
            }
        }
    },
    "Resources": {
        "DemoIGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        }
                    }
                ]
            },
            "DependsOn": [
                "DemoVPC"
            ]
        },
        "DemoVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.90.0.0/16",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "demo-vpc"
                    }
                ]
            }
        },
        "IGWA": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "DemoIGW"
                },
                "VpcId": {
                    "Ref": "DemoVPC"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "DemoVPC"
                },
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "PE Quick Demo Public Route"
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "DemoIGW"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "DependsOn": [
                "IGWA"
            ]
        },
        "SN1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DemoVPC"
                },
                "CidrBlock": "10.90.1.0/24",
                "AvailabilityZone": "us-west-2a",
                "PrivateDnsNameOptionsOnLaunch": {
                    "EnableResourceNameDnsAAAARecord": false,
                    "EnableResourceNameDnsARecord": true,
                    "HostnameType": "ip-name"
                },
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "demo-subnet-1"
                    }
                ]
            }
        },
        "SN2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DemoVPC"
                },
                "CidrBlock": "10.90.2.0/24",
                "AvailabilityZone": "us-west-2b",
                "PrivateDnsNameOptionsOnLaunch": {
                    "EnableResourceNameDnsAAAARecord": false,
                    "EnableResourceNameDnsARecord": true,
                    "HostnameType": "ip-name"
                },
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "demo-subnet-2"
                    }
                ]
            }
        },
        "SN3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DemoVPC"
                },
                "CidrBlock": "10.90.3.0/24",
                "AvailabilityZone": "us-west-2c",
                "PrivateDnsNameOptionsOnLaunch": {
                    "EnableResourceNameDnsAAAARecord": false,
                    "EnableResourceNameDnsARecord": true,
                    "HostnameType": "ip-name"
                },
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "demo-subnet-3"
                    }
                ]
            }
        },
        "SN4": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DemoVPC"
                },
                "CidrBlock": "10.90.4.0/24",
                "AvailabilityZone": "us-west-2d",
                "PrivateDnsNameOptionsOnLaunch": {
                    "EnableResourceNameDnsAAAARecord": false,
                    "EnableResourceNameDnsARecord": true,
                    "HostnameType": "ip-name"
                },
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "demo-subnet-4"
                    }
                ]
            }
        },
        "SRTA1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SN1"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "SRTA2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SN2"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "SRTA3": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SN3"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "SRTA4": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SN4"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "DemoSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow nodes communication.",
                "VpcId": {
                    "Ref": "DemoVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 2379,
                        "ToPort": 2379,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 4000,
                        "ToPort": 4002,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 3000,
                        "ToPort": 3000,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": -1,
                        "ToPort": -1,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "quick-demo-sg"
                    }
                ]
            }
        },
        "IRule": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "IpProtocol": "-1",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "DemoSG",
                        "GroupId"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "DemoSG",
                        "GroupId"
                    ]
                }
            }
        },
        "TG": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckEnabled": "True",
                "HealthCheckIntervalSeconds": 5,
                "HealthCheckPort": "4000",
                "HealthCheckProtocol": "TCP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Name": "demo-target-group",
                "Port": 4000,
                "Protocol": "TCP",
                "TargetType": "ip",
                "VpcId": {
                    "Ref": "DemoVPC"
                }
            }
        },
        "NLB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Type": "network",
                "Name": "demo-nlb",
                "Scheme": "internal",
                "Subnets": [
                    {
                        "Ref": "SN1"
                    },
                    {
                        "Ref": "SN2"
                    },
                    {
                        "Ref": "SN3"
                    }
                ]
            }
        },
        "LSNR": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "ForwardConfig": {
                            "TargetGroups": [
                                {
                                    "TargetGroupArn": {
                                        "Ref": "TG"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "NLB"
                },
                "Port": 4000,
                "Protocol": "TCP"
            }
        },
        "KVT": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "VersionDescription": "v1",
                "LaunchTemplateName": {
                    "Fn::Sub": "${AWS::StackName}-quick-demo-tikv-lt"
                },
                "LaunchTemplateData": {
                    "Monitoring": {
                        "Enabled": true
                    },
                    "IamInstanceProfile": {
                        "Name": {
                            "Ref": "DemoInstanceProfile"
                        }
                    },
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvda",
                            "Ebs": {
                                "DeleteOnTermination": true,
                                "Encrypted": false,
                                "VolumeSize": 100,
                                "VolumeType": "gp2"
                            }
                        }
                    ],
                    "NetworkInterfaces": [
                        {
                            "DeviceIndex": 0,
                            "AssociatePublicIpAddress": true,
                            "Groups": [
                                {
                                    "Ref": "DemoSG"
                                }
                            ],
                            "DeleteOnTermination": true
                        }
                    ],
                    "ImageId": "ami-094125af156557ca2",
                    "InstanceType": "c5.xlarge",
                    "KeyName": "pe-class-key",
                    "TagSpecifications": [
                        {
                            "ResourceType": "instance",
                            "Tags": [
                                {
                                    "Key": "owner",
                                    "Value": {
                                        "Ref": "TrainerEmail"
                                    }
                                },
                                {
                                    "Key": "Name",
                                    "Value": "kv"
                                }
                            ]
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::FindInMap": [
                                "UserDataMap",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "common"
                            ]
                        }
                    }
                }
            }
        },
        "PDT": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "VersionDescription": "v1",
                "LaunchTemplateName": {
                    "Fn::Sub": "${AWS::StackName}-quick-demo-pd-lt"
                },
                "LaunchTemplateData": {
                    "Monitoring": {
                        "Enabled": true
                    },
                    "IamInstanceProfile": {
                        "Name": {
                            "Ref": "DemoInstanceProfile"
                        }
                    },
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvda",
                            "Ebs": {
                                "DeleteOnTermination": true,
                                "Encrypted": false,
                                "VolumeSize": 30,
                                "VolumeType": "gp2"
                            }
                        }
                    ],
                    "NetworkInterfaces": [
                        {
                            "DeviceIndex": 0,
                            "AssociatePublicIpAddress": true,
                            "Groups": [
                                {
                                    "Ref": "DemoSG"
                                }
                            ],
                            "DeleteOnTermination": true
                        }
                    ],
                    "ImageId": "ami-094125af156557ca2",
                    "InstanceType": "c5.xlarge",
                    "KeyName": "pe-class-key",
                    "TagSpecifications": [
                        {
                            "ResourceType": "instance",
                            "Tags": [
                                {
                                    "Key": "owner",
                                    "Value": {
                                        "Ref": "TrainerEmail"
                                    }
                                },
                                {
                                    "Key": "Name",
                                    "Value": "pd"
                                }
                            ]
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::FindInMap": [
                                "UserDataMap",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "common"
                            ]
                        }
                    }
                }
            }
        },
        "DBT": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "VersionDescription": "v1",
                "LaunchTemplateName": {
                    "Fn::Sub": "${AWS::StackName}-quick-demo-tidb-lt"
                },
                "LaunchTemplateData": {
                    "Monitoring": {
                        "Enabled": true
                    },
                    "IamInstanceProfile": {
                        "Name": {
                            "Ref": "DemoInstanceProfile"
                        }
                    },
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvda",
                            "Ebs": {
                                "DeleteOnTermination": true,
                                "Encrypted": false,
                                "VolumeSize": 30,
                                "VolumeType": "gp2"
                            }
                        }
                    ],
                    "NetworkInterfaces": [
                        {
                            "DeviceIndex": 0,
                            "AssociatePublicIpAddress": true,
                            "Groups": [
                                {
                                    "Ref": "DemoSG"
                                }
                            ],
                            "DeleteOnTermination": true
                        }
                    ],
                    "ImageId": "ami-094125af156557ca2",
                    "InstanceType": "c5.xlarge",
                    "KeyName": "pe-class-key",
                    "TagSpecifications": [
                        {
                            "ResourceType": "instance",
                            "Tags": [
                                {
                                    "Key": "owner",
                                    "Value": {
                                        "Ref": "TrainerEmail"
                                    }
                                },
                                {
                                    "Key": "Name",
                                    "Value": "db"
                                }
                            ]
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::FindInMap": [
                                "UserDataMap",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "common"
                            ]
                        }
                    }
                }
            }
        },
        "MLT": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "VersionDescription": "v1",
                "LaunchTemplateName": {
                    "Fn::Sub": "${AWS::StackName}-quick-demo-monitor-lt"
                },
                "LaunchTemplateData": {
                    "IamInstanceProfile": {
                        "Name": {
                            "Ref": "DemoInstanceProfile"
                        }
                    },
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvda",
                            "Ebs": {
                                "DeleteOnTermination": true,
                                "Encrypted": false,
                                "VolumeSize": 100,
                                "VolumeType": "gp2"
                            }
                        }
                    ],
                    "NetworkInterfaces": [
                        {
                            "DeviceIndex": 0,
                            "AssociatePublicIpAddress": true,
                            "Groups": [
                                {
                                    "Ref": "DemoSG"
                                }
                            ],
                            "DeleteOnTermination": true
                        }
                    ],
                    "ImageId": "ami-094125af156557ca2",
                    "InstanceType": "c5.xlarge",
                    "KeyName": "pe-class-key",
                    "TagSpecifications": [
                        {
                            "ResourceType": "instance",
                            "Tags": [
                                {
                                    "Key": "owner",
                                    "Value": {
                                        "Ref": "TrainerEmail"
                                    }
                                },
                                {
                                    "Key": "Name",
                                    "Value": "monitor"
                                }
                            ]
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::FindInMap": [
                                "UserDataMap",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "common"
                            ]
                        }
                    }
                }
            }
        },
        "KVG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": "TiKV",
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "KVT"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "KVT",
                            "LatestVersionNumber"
                        ]
                    }
                },
                "MaxSize": "5",
                "MinSize": "3",
                "DesiredCapacity": "3",
                "VPCZoneIdentifier": [
                    {
                        "Ref": "SN1"
                    },
                    {
                        "Ref": "SN2"
                    },
                    {
                        "Ref": "SN3"
                    }
                ],
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "trainer",
                        "Value": {
                            "Ref": "TrainerName"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "DependsOn": [
                "IGWA"
            ]
        },
        "PDG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": "PD",
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "PDT"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "PDT",
                            "LatestVersionNumber"
                        ]
                    }
                },
                "MaxSize": "3",
                "MinSize": "3",
                "DesiredCapacity": "3",
                "VPCZoneIdentifier": [
                    {
                        "Ref": "SN1"
                    },
                    {
                        "Ref": "SN2"
                    },
                    {
                        "Ref": "SN3"
                    }
                ],
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "trainer",
                        "Value": {
                            "Ref": "TrainerName"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "DependsOn": [
                "IGWA"
            ]
        },
        "DBG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": "TiDB",
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "DBT"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "DBT",
                            "LatestVersionNumber"
                        ]
                    }
                },
                "MaxSize": "4",
                "MinSize": "2",
                "DesiredCapacity": "2",
                "VPCZoneIdentifier": [
                    {
                        "Ref": "SN1"
                    },
                    {
                        "Ref": "SN2"
                    },
                    {
                        "Ref": "SN3"
                    }
                ],
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "trainer",
                        "Value": {
                            "Ref": "TrainerName"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "DependsOn": [
                "IGWA"
            ]
        },
        "MG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": "Monitor",
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "MLT"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "DBT",
                            "LatestVersionNumber"
                        ]
                    }
                },
                "MaxSize": "1",
                "MinSize": "1",
                "DesiredCapacity": "1",
                "VPCZoneIdentifier": [
                    {
                        "Ref": "SN4"
                    }
                ],
                "Tags": [
                    {
                        "Key": "owner",
                        "Value": {
                            "Ref": "TrainerEmail"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "trainer",
                        "Value": {
                            "Ref": "TrainerName"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "DependsOn": [
                "IGWA"
            ]
        },
        "EHandler": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "import boto3\n",
                                "def lambda_handler(event, context):\n",
                                "    print(event)\n",
                                "    region = 'us-west-2'\n",
                                "    sqs = boto3.client('sqs', region_name=region)\n",
                                "    ec2 = boto3.client('ec2', region_name=region)\n",
                                "    sts = boto3.client('sts', region_name=region)\n",
                                "    message = None\n",
                                "    if 'source' in event:\n",
                                "        source_type = event['source']\n",
                                "        if (\n",
                                "            source_type == 'aws.autoscaling'\n",
                                "        ):\n",
                                "            asg_name = event['detail']['AutoScalingGroupName']\n",
                                "            instance_id = event['detail']['EC2InstanceId']\n",
                                "            res = ec2.describe_instances(\n",
                                "                InstanceIds=[\n",
                                "                    instance_id,\n",
                                "                ],\n",
                                "            )\n",
                                "            ec2_private_ip = res['Reservations'][0]['Instances'][0]['PrivateIpAddress']\n",
                                "            print(ec2_private_ip)\n",
                                "            aws_account_id = sts.get_caller_identity()['Account']\n",
                                "            queue_url = (\n",
                                "                'https://sqs.'\n",
                                "                + region\n",
                                "                + '.amazonaws.com/'\n",
                                "                + aws_account_id\n",
                                "                + '/demo-queue'\n",
                                "            )\n",
                                "            print(queue_url)\n",
                                "            if event['detail']['LifecycleTransition'] == 'autoscaling:EC2_INSTANCE_LAUNCHING':\n",
                                "               message = asg_name + '::scale-out::' + ec2_private_ip\n",
                                "               node_role = 'default'\n",
                                "               if asg_name == 'TiDB':\n",
                                "                   node_role = 'db-as'\n",
                                "               elif asg_name == 'TiKV':\n",
                                "                   node_role = 'kv-as'\n",
                                "               ec2.create_tags(\n",
                                "                   DryRun=False,\n",
                                "                   Resources=[\n",
                                "                       instance_id,\n",
                                "                   ],\n",
                                "                   Tags=[\n",
                                "                       {\n",
                                "                           'Key': 'role',\n",
                                "                           'Value': node_role,\n",
                                "                       },\n",
                                "                       {\n",
                                "                           'Key': 'student',\n",
                                "                           'Value': 'user1'\n",
                                "                       },\n",
                                "                   ],\n",
                                "               )\n",
                                "            elif event['detail']['LifecycleTransition'] == 'autoscaling:EC2_INSTANCE_TERMINATING':\n",
                                "               message = asg_name + '::scale-in::' + ec2_private_ip\n",
                                "            sqs.send_message(QueueUrl=queue_url, MessageBody=message)\n",
                                "            print(message)\n",
                                "    return message\n"
                            ]
                        ]
                    }
                },
                "Description": "Triggered by instance event in ASG",
                "FunctionName": "demo-asg-scale-handler",
                "PackageType": "Zip",
                "Role": {
                    "Fn::GetAtt": [
                        "DemoLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.10",
                "Handler": "index.lambda_handler",
                "Timeout": 900
            }
        },
        "TiDBScaleOutEventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "EventPattern": {
                    "source": [
                        "aws.autoscaling"
                    ],
                    "detail-type": [
                        "EC2 Instance-launch Lifecycle Action"
                    ],
                    "detail": {
                        "AutoScalingGroupName": [
                            {
                                "Ref": "DBG"
                            }
                        ]
                    }
                },
                "Name": "demo-db-layer-scale-out-rule",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "EHandler",
                                "Arn"
                            ]
                        },
                        "Id": "1"
                    }
                ]
            }
        },
        "TiDBScaleOutEventToLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "EHandler",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "TiDBScaleOutEventRule",
                        "Arn"
                    ]
                }
            }
        },
        "DBGScaleOutLifecycleHook": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "DBG"
                },
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
                "HeartbeatTimeout": 30,
                "DefaultResult": "CONTINUE"
            }
        },
        "TiDBScaleInEventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "EventPattern": {
                    "source": [
                        "aws.autoscaling"
                    ],
                    "detail-type": [
                        "EC2 Instance-terminate Lifecycle Action"
                    ],
                    "detail": {
                        "AutoScalingGroupName": [
                            {
                                "Ref": "DBG"
                            }
                        ]
                    }
                },
                "Name": "demo-db-layer-scale-in-rule",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "EHandler",
                                "Arn"
                            ]
                        },
                        "Id": "1"
                    }
                ]
            }
        },
        "TiDBScaleInEventToLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "EHandler",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "TiDBScaleInEventRule",
                        "Arn"
                    ]
                }
            }
        },
        "DBGScaleInLifecycleHook": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "DBG"
                },
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
                "HeartbeatTimeout": 120,
                "DefaultResult": "CONTINUE"
            }
        },
        "TiKVScaleOutEventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "EventPattern": {
                    "source": [
                        "aws.autoscaling"
                    ],
                    "detail-type": [
                        "EC2 Instance-launch Lifecycle Action"
                    ],
                    "detail": {
                        "AutoScalingGroupName": [
                            {
                                "Ref": "KVG"
                            }
                        ]
                    }
                },
                "Name": "demo-kv-scale-out-rule",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "EHandler",
                                "Arn"
                            ]
                        },
                        "Id": "1"
                    }
                ]
            }
        },
        "TiKVScaleOutEventToLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "EHandler",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "TiKVScaleOutEventRule",
                        "Arn"
                    ]
                }
            }
        },
        "KVGScaleOutLifecycleHook": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "KVG"
                },
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
                "HeartbeatTimeout": 30,
                "DefaultResult": "CONTINUE"
            }
        },
        "TiKVScaleInEventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "EventPattern": {
                    "source": [
                        "aws.autoscaling"
                    ],
                    "detail-type": [
                        "EC2 Instance-terminate Lifecycle Action"
                    ],
                    "detail": {
                        "AutoScalingGroupName": [
                            {
                                "Ref": "KVG"
                            }
                        ]
                    }
                },
                "Name": "demo-kv-layer-scale-in-rule",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "EHandler",
                                "Arn"
                            ]
                        },
                        "Id": "1"
                    }
                ]
            }
        },
        "TiKVScaleInEventToLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "EHandler",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "TiKVScaleInEventRule",
                        "Arn"
                    ]
                }
            }
        },
        "KVGScaleInLifecycleHook": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "KVG"
                },
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
                "HeartbeatTimeout": 300,
                "DefaultResult": "CONTINUE"
            }
        },
        "DemoQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "QueueName": "demo-queue"
            },
            "DependsOn": [
                "EHandler"
            ]
        },
        "DBGCPUPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "DBG"
                },
                "PolicyType": "TargetTrackingScaling",
                "TargetTrackingConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ASGAverageCPUUtilization"
                    },
                    "TargetValue": 30.0
                }
            }
        },
        "KVGCPUPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "KVG"
                },
                "PolicyType": "TargetTrackingScaling",
                "TargetTrackingConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ASGAverageCPUUtilization"
                    },
                    "TargetValue": 30.0
                }
            }
        },
        "DemoLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "DemoLambdaPolicy01",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "sts:GetCallerIdentity",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "elasticloadbalancing:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:Describe*",
                                        "ec2:List*",
                                        "ec2:DeleteTags",
                                        "ec2:CreateTags"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sqs:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DemoInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "DemoInstanceRolePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "DemoInstancePolicy01",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "sts:GetCallerIdentity",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "elasticloadbalancing:RegisterTargets",
                                "elasticloadbalancing:DeregisterTargets",
                                "elasticloadbalancing:Describe*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:Describe*",
                                "ec2:List*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sqs:*"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "DemoInstanceRole"
                    }
                ]
            }
        },
        "DemoInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "DemoInstanceRole"
                    }
                ]
            }
        }
    }
}